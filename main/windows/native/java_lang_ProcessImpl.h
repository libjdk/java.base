/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class java_lang_ProcessImpl */

#ifndef _Included_java_lang_ProcessImpl
#define _Included_java_lang_ProcessImpl
#ifdef __cplusplus
extern "C" {
#endif
#undef java_lang_ProcessImpl_SUPPORTS_NORMAL_TERMINATION
#define java_lang_ProcessImpl_SUPPORTS_NORMAL_TERMINATION 0L
#undef java_lang_ProcessImpl_VERIFICATION_CMD_BAT
#define java_lang_ProcessImpl_VERIFICATION_CMD_BAT 0L
#undef java_lang_ProcessImpl_VERIFICATION_WIN32
#define java_lang_ProcessImpl_VERIFICATION_WIN32 1L
#undef java_lang_ProcessImpl_VERIFICATION_WIN32_SAFE
#define java_lang_ProcessImpl_VERIFICATION_WIN32_SAFE 2L
#undef java_lang_ProcessImpl_VERIFICATION_LEGACY
#define java_lang_ProcessImpl_VERIFICATION_LEGACY 3L
#undef java_lang_ProcessImpl_DOUBLEQUOTE
#define java_lang_ProcessImpl_DOUBLEQUOTE 34L
#undef java_lang_ProcessImpl_BACKSLASH
#define java_lang_ProcessImpl_BACKSLASH 92L
/*
 * Class:     java_lang_ProcessImpl
 * Method:    getStillActive
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_java_lang_ProcessImpl_getStillActive
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    getExitCodeProcess
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_java_lang_ProcessImpl_getExitCodeProcess
  (JNIEnv *, jclass, jlong);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    waitForInterruptibly
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_java_lang_ProcessImpl_waitForInterruptibly
  (JNIEnv *, jclass, jlong);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    waitForTimeoutInterruptibly
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_java_lang_ProcessImpl_waitForTimeoutInterruptibly
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    terminateProcess
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_java_lang_ProcessImpl_terminateProcess
  (JNIEnv *, jclass, jlong);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    getProcessId0
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_java_lang_ProcessImpl_getProcessId0
  (JNIEnv *, jclass, jlong);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    isProcessAlive
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_ProcessImpl_isProcessAlive
  (JNIEnv *, jclass, jlong);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    create
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[JZ)J
 */
JNIEXPORT jlong JNICALL Java_java_lang_ProcessImpl_create
  (JNIEnv *, jclass, jstring, jstring, jstring, jlongArray, jboolean);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    openForAtomicAppend
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_java_lang_ProcessImpl_openForAtomicAppend
  (JNIEnv *, jclass, jstring);

/*
 * Class:     java_lang_ProcessImpl
 * Method:    closeHandle
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_ProcessImpl_closeHandle
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
